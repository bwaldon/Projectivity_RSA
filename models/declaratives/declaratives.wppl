// using binary beliefs states instead of threshold
var beliefs = ["dances","doesn't dance"]
var ah_beliefs = ["dances", "doesn't dance", null]


// if not by-item:
// var speaker_prior = function() {
//   return categorical({vs: beliefs, ps: [.73, .27]})
// }
// // use these in literal and pragmatic listener
//  var speaker_belief = speaker_prior()
//  var ah_belief = _.includes(utterance, "BARE") ? categorical({ps:[0.146,0.054,0.9], vs:ah_beliefs}) : speaker_prior()

var priors = {
  Charley_H : [0.804632353, 0.19536764699999998],
  Danny_H : [0.697062937, 0.302937063],
  Emily_H : [0.561555556, 0.43844444400000004],
  Emma_H : [0.680763889, 0.31923611100000004],
  Frank_H : [0.67972028, 0.32027972000000005],
  Gace_H : [0.790144928, 0.20985507199999998],
  Isabella_H : [0.517707006, 0.48229299400000003],
  Jackson_H : [0.774965035, 0.22503496499999998],
  Jayden_H : [0.687794118, 0.312205882],
  Jon_H : [0.7559375, 0.24406249999999996],
  Josh_H : [0.544575163, 0.455424837],
  Josie_H : [0.73343949, 0.26656051000000003],
  Julian_H : [0.599493671, 0.40050632900000005],
  Mary_H : [0.815167785, 0.18483221500000002],
  Mia_H : [0.579022556, 0.42097744400000003],
  livia_H : [0.664776119, 0.335223881],
  Owen_H : [0.746482759, 0.25351724099999995],
  Sophia_H : [0.634248366, 0.365751634],
  Tony_H : [0.747279412, 0.25272058799999997],
  Zoe_H : [0.745971223, 0.25402877700000004],
  Charley_L : [0.277066667, 0.7229333330000001],
  Danny_L : [0.27993007, 0.72006993],
  Emily_L : [0.151655629, 0.848344371],
  Emma_L : [0.323098592, 0.676901408],
  Frank_L : [0.16965035, 0.83034965],
  Gace_L : [0.24777027, 0.75222973],
  Isabella_L : [0.125813953, 0.874186047],
  Jackson_L : [0.186013986, 0.813986014],
  Jayden_L : [0.1756, 0.8244],
  Jon_L : [0.235696203, 0.764303797],
  Josh_L : [0.236917293, 0.763082707],
  Josie_L : [0.117286822, 0.882713178],
  Julian_L : [0.401796875, 0.598203125],
  Mary_L : [0.22540146, 0.77459854],
  Mia_L : [0.224901961, 0.775098039],
  Olivia_L : [0.210592105, 0.789407895],
  Owen_L : [0.279503546, 0.7204964540000001],
  Sophia_L : [0.415413534, 0.584586466],
  Tony_L : [0.2196, 0.7804],
  Zoe_L : [0.192108844, 0.8078911559999999]
}


var quds = ["MC", "CC"]

// specify utterance alternatives, only include polar interrogatives for now
var utterances = ["know-dances-.", 
                  "know-doesn't dance-.",                 
                  "think-dances-.", 
                  "think-doesn't dance-.",                         
                  "BARE-dances-.",
                  "BARE-doesn't dance-."]


var predicate_qud = function(predicate) {
  if (predicate=="know") {
    return categorical({ps: [0.8, 0.2], vs: ["MC", "CC"]})
  }
  if (predicate=="think"){
    return categorical({ps: [0.7, 0.3], vs: ["MC", "CC"]})
  } else { // BARE
    return categorical({ps: [0, 1], vs: ["MC", "CC"]})
  }
}

var meaning = function(utterance, belief_states) {
  var splitutt = utterance.split('-')
  var predicate = splitutt[0]
  var content = splitutt[1]

  var speaker_belief = belief_states.speaker_belief
  var ah_belief = belief_states.ah_belief
  
  if (predicate=="know") {
    return speaker_belief == content && ah_belief == content
  } else if (predicate=="think") {
    return ah_belief == content // antiveridical: && speaker_belief != content 
  } else {
    return speaker_belief == content && ah_belief == null
  }
}

// specify different quds
var qudFns = {
  CC : function(belief_states) {return { speaker_belief: belief_states.speaker_belief} },
  MC : function(belief_states) {return { ah_belief: belief_states.ah_belief } }
}


var literalListener = cache(function(utterance,qud) {
  return Infer({model: function(){
    // assuming uniform prior at the literal listener level for now
    var speaker_belief = uniformDraw(beliefs)
    var ah_belief = _.includes(utterance, "BARE") ? categorical({ps:[0.1,0.1,0.8], vs:ah_beliefs}) : uniformDraw(beliefs)
    var belief_states = {speaker_belief, ah_belief}
    var qudFn = qudFns[qud]
    var qudAnswer = qudFn(belief_states)
    factor(meaning(utterance, belief_states)?1:0)
//     return {speaker_belief:speaker_belief, ah_belief:ah_belief}
    return qudAnswer
  }})
})

// display("u:BARE-dances-.")
// var bare = literalListener("BARE-dances-.","CC")
// viz(bare)
// // viz(marginalize(bare, "speaker_belief"))
// // viz(marginalize(bare, "ah_belief"))

// display("u:know-dances-. MC")
// var know = literalListener("know-dances-.", "MC")
// viz(know)
// // viz(marginalize(know, "speaker_belief"))
// // viz(marginalize(know, "ah_belief"))

// display("u:know-dances-. CC")
// var know = literalListener("know-dances-.", "CC")
// viz(know)
// // viz(marginalize(know, "speaker_belief"))
// // viz(marginalize(know, "ah_belief"))

// display("u:think-dances-. MC")
// var think = literalListener("think-dances-.", "MC")
// viz(think)
// // viz(marginalize(think, "speaker_belief"))
// // viz(marginalize(think, "ah_belief"))

// display("u:think-dances-. CC")
// var think = literalListener("think-dances-.", "CC")
// viz(think)
// // viz(marginalize(think, "speaker_belief"))
// // viz(marginalize(think, "ah_belief"))


var alpha = 3

var cost = function(utterance){
  var embedded_cost = _.includes(utterance, "BARE") ? 0 : 0.25
  var negation_cost = _.includes(utterance, "doesn't") ? 0.25 : 0
  return embedded_cost + negation_cost
}

var speaker = cache(function(beliefs, qud) {
  return Infer({model: function(){
    var utterance = uniformDraw(utterances)
    var qudFn = qudFns[qud]
    var qudAnswer = qudFn(beliefs)
    factor(alpha*(literalListener(utterance, qud).score(qudAnswer)) - cost(utterance))
    return utterance
  }})
})

// display("belief: dances, dances. MC")
// viz(speaker({speaker_belief:"dances", ah_belief:"dances"}, "MC"))
// display("belief: dances, doesn't dance CC")
// viz(speaker({speaker_belief:"dances",ah_belief:"doesn't dance"}, "CC"))
// display("belief: dances, doesn't dance MC")
// viz(speaker({speaker_belief:"dances",ah_belief:"doesn't dance"}, "MC"))


var pragmaticListener = function(utterance,cat_prior) {
  Infer({model: function() {
    var splitutt = utterance.split('-')
    var predicate = splitutt[0]
    var qud = predicate_qud(predicate)
    var speaker_prior = priors[cat_prior]
    // scale it first ("dances" and "doesn't dance" sum to 0.1) and add prob for null (0.9)
    var ah_prior = map(function(belief) {  belief * 0.1; }, speaker_prior).concat(0.9)
    
    var speaker_belief = categorical({ps: speaker_prior, vs: beliefs})
//     var ah_belief = categorical({ps:[0.5,0.5,0.1], vs:ah_beliefs})
    var ah_belief = _.includes(utterance, "BARE") ? categorical({ps:ah_prior, vs:ah_beliefs}) : categorical({ps: speaker_prior, vs: beliefs})
    var beliefs = {speaker_belief: speaker_belief, ah_belief:ah_belief}
    observe(speaker(beliefs, qud), utterance)
        return beliefs
  }})
}


// display("u:know-dances-.")
// var know = pragmaticListener("know-dances-.","Charley_L")
// // viz(know)
// viz.table(marginalize(know, "speaker_belief"))
// viz.table(marginalize(know, "ah_belief"))


// display("u:think-dances-.")
// var think = pragmaticListener("think-dances-.")
// // viz(think)
// viz.table(marginalize(think, "speaker_belief"))
// viz.table(marginalize(think, "ah_belief"))

// display("u:BARE-dances-.")
// var bare = pragmaticListener("BARE-dances-.")
// // viz(bare)
// viz.table(marginalize(bare, "speaker_belief"))
