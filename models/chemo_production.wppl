var belief_states = [["dances","dances"],
                     ["dances","doesn't dance"],
                     ["doesn't dance","dances"],
                     ["doesn't dance","doesn't dance"]] //<SPEAKER BELIEF, ATTITUDE HOLDER BELIEF>


// speaker and attitude holder belief priors
var beliefs = ["dances","doesn't dance"]

var speaker_beliefPrior = function() {
  return categorical({
    vs: beliefs,
    ps: [.75,.25]
  })
}

var ah_beliefPrior = function() {
  return categorical({
    vs: beliefs,
    ps: [.75,.25]
  })
}

// extract set of belief tuples compatible with utterance. dependent on predicate and sentence type (interrogative, declarative)
var extractBeliefs = function(utterance) {
   // console.log("i'm in")
   var splitutt = utterance.split('-')
   var predicate = splitutt[0]
   var content = splitutt[1]
   var sentence_type = splitutt[2]

   if (predicate == "know") {
     if (sentence_type == "?") {
       return [{speaker_belief:"dances", ah_belief:"dances"},
               {speaker_belief:"dances", ah_belief:"doesn't dance"}]
     } else {
       console.log("error: unknown sentence type in extractBeliefs()")
     }
   }
   if (predicate == "think") {
    if (sentence_type == "?") {
       return [{speaker_belief:"dances", ah_belief:"dances"},
               {speaker_belief:"doesn't dance", ah_belief:"dances"},
               {speaker_belief:"dances", ah_belief:"doesn't dance"},
               {speaker_belief:"doesn't dance", ah_belief:"doesn't dance"}]
     } else {
       console.log("error: unknown sentence type in extractBeliefs()")
     }
   }
   if (predicate == "BARE") {
     if (sentence_type == "?") {
       return [{speaker_belief:"dances", ah_belief:"dances"},
               {speaker_belief:"doesn't dance", ah_belief:"doesn't dance"}]
     } else {
       console.log("error: unknown sentence type in extractBeliefs()")
     }
   }
}

// meaning function checks whether belief tuple is in set of belief tuples compatible with utterance
var meaning = function(utterance, belief_tuple) {
  var extractedBeliefs = extractBeliefs(utterance) // the set of belief tuples compatible with the utterance
  var speaker_belief = belief_tuple.speaker_belief
  var ah_belief = belief_tuple.ah_belief
  var matchesInArray = reduce(function(item, acc){
    let val = item.speaker_belief == speaker_belief && item.ah_belief == ah_belief ? 1 : 0
    return(val + acc)
    }, 0, extractedBeliefs)
  return(matchesInArray > 0) 
}

// display(meaning("know-dances-?", {speaker_belief:"dances", ah_belief:"dances"}))


// specify utterance alternatives
var utterances = ["know-dances-?", 
                  "know-doesn't dance-?",                 
                  "think-dances-?", 
                  "think-doesn't dance-?",                         
                  "BARE-dances-?"]

// set cost (we start with zero)
var embeddedCost = 0

var cost = function(utterance){
  return utterance.includes("BARE") ? // if it's not a bare form, add a cost
    0 : 
    embeddedCost 
}

// Speaker, chooses an utterance to convey a particular answer of the qud
var speaker = cache(function(belief_tuple) {
  return Infer({model:function() {
      var utterance = categorical({ps:[0.8, 0.6, 0.1, 0.5, 0.4],
                                   vs:utterances })
      condition(meaning(utterance, belief_tuple))
    return utterance
  }})
})

// viz.table(speaker({speaker_belief:"dances", ah_belief:"dances"}))


var pragmaticListener = cache(function(utterance) {
  return Infer({model: function(){
    //////// priors ////////
    var speaker_belief = speaker_beliefPrior()
    var ah_belief = ah_beliefPrior()
    ////////////////////////
    var belief_tuple = {speaker_belief:speaker_belief, ah_belief:ah_belief}
    display("speaker: "+speaker_belief)
    display("ah: "+ah_belief)
    observe(speaker(belief_tuple), utterance)
    return belief_tuple
    // in order to turn this into a joint inference listener:
    // return [belief_tuple, qud]
  }})
})


///


// speaker knows that speaker and ah believe "dances" and wants to communicate speaker belief, ah belief, and both, respectively
// speaker({speaker_belief:"dances", ah_belief:"dances"})
// speaker({speaker_belief:"dances", ah_belief:"dances"}) // check BARE
// speaker({speaker_belief:"dances", ah_belief:"dances"})

pragmaticListener("know-dances-?")
pragmaticListener("BARE-dances-?")



